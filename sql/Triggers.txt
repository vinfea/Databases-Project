-- Triggers to stop insert with invalid input --

-- Insert email into chain_email --

DELIMITER $$

CREATE TRIGGER insert_email_chain BEFORE INSERT
ON chain_email
FOR EACH ROW BEGIN
IF NEW.email NOT REGEXP '^[a-zA-Z0-9]+@[a-zA-Z]+\.[a-zA-Z]+$' THEN
SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Invalid email.';
END IF;
END$$

DELIMITER ; 

-- Insert email into hotel --

DELIMITER $$

CREATE TRIGGER insert_email_hotel BEFORE INSERT
ON hotel
FOR EACH ROW BEGIN
IF NEW.email NOT REGEXP '^[a-zA-Z0-9]+@[a-zA-Z]+\\.[a-zA-Z]+$' THEN
SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Invalid email.';
END IF;
END$$

DELIMITER ; 

-- Insert phone_num into chain_phone_num --

DELIMITER $$

CREATE TRIGGER insert_phone_chain BEFORE INSERT
ON chain_phone_num
FOR EACH ROW BEGIN
IF NEW.phone_num NOT REGEXP '^\\+[0-9]{1}[[:blank:]]\\([0-9]{3}\\)[[:blank:]][0-9]{3}-[0-9]{4}$' THEN
SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Invalid phone number.';
END IF;
END$$

DELIMITER ; 

-- Insert phone_num into hotel_phone --

DELIMITER $$

CREATE TRIGGER insert_phone_hotel BEFORE INSERT
ON hotel_phone
FOR EACH ROW BEGIN
IF NEW.phone_num NOT REGEXP '^\\+[0-9]{1}[[:blank:]]\\([0-9]{3}\\)[[:blank:]][0-9]{3}-[0-9]{4}$' THEN
SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Invalid phone number.';
END IF;
END$$

DELIMITER ; 

-- Insert room_num into booking_renting --

DELIMITER $$

CREATE TRIGGER insert_booking_renting BEFORE INSERT
ON booking_renting
FOR EACH ROW BEGIN
IF (SELECT room_num
FROM room 
WHERE room_num = NEW.room_num AND hotel_id = NEW.hotel_id AND chain = NEW.chain) IS NULL THEN 
SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Invalid booking.';
END IF;
END$$

DELIMITER ; 

-- get city from address field ---

DELIMITER $$

CREATE FUNCTION get_city_from_address(addr VARCHAR(50))
RETURNS VARCHAR(50)
DETERMINISTIC
BEGIN
    DECLARE city VARCHAR(50);
    SET city = SUBSTRING_INDEX(SUBSTRING_INDEX(addr, ',', -2), ',', 1);
    RETURN TRIM(city);
END$$

DELIMITER ;

-- insert range of dates in booking_dates --
DELIMITER $$

CREATE PROCEDURE InsertBookingDates(
    IN in_booking_id INT,
    IN in_hotel_id INT,
    IN in_chain VARCHAR(255),
    IN in_start_date DATE,
    IN in_end_date DATE
)
BEGIN
    -- Declare the variable with a different name
    DECLARE v_current_date DATE;
    SET v_current_date = in_start_date;

    -- Create a temporary table to hold the dates
    CREATE TEMPORARY TABLE temp_dates (
        date DATE
    );

    -- Loop to insert dates into temporary table
    WHILE v_current_date <= in_end_date DO
        INSERT INTO temp_dates (date) VALUES (v_current_date);
        SET v_current_date = DATE_ADD(v_current_date, INTERVAL 1 DAY);
    END WHILE;

    -- Insert into booking_date from temporary table
    INSERT INTO booking_date (booking_id, hotel_id, chain, date)
    SELECT in_booking_id, in_hotel_id, in_chain, date
    FROM temp_dates;

    -- Drop the temporary table
    DROP TEMPORARY TABLE IF EXISTS temp_dates;
END$$

DELIMITER ;

DELIMITER $$

CREATE PROCEDURE InsertBookingDates(
    IN in_booking_id INT,
    IN in_hotel_id INT,
    IN in_chain VARCHAR(255),
    IN in_start_date DATE,
    IN in_end_date DATE
)
BEGIN
    -- Drop the temporary table if it exists
    DROP TEMPORARY TABLE IF EXISTS temp_dates;

    -- Declare the variable with a different name
    DECLARE v_current_date DATE;
    SET v_current_date = in_start_date;

    -- Create a temporary table to hold the dates
    CREATE TEMPORARY TABLE temp_dates (
        date DATE
    );

    -- Loop to insert dates into temporary table
    WHILE v_current_date <= in_end_date DO
        INSERT INTO temp_dates (date) VALUES (v_current_date);
        SET v_current_date = DATE_ADD(v_current_date, INTERVAL 1 DAY);
    END WHILE;

    -- Insert into booking_date from temporary table
    INSERT INTO booking_date (booking_id, hotel_id, chain, date)
    SELECT in_booking_id, in_hotel_id, in_chain, date
    FROM temp_dates;

    -- Drop the temporary table
    DROP TEMPORARY TABLE IF EXISTS temp_dates;
END$$

DELIMITER ;

-- Trigger to add record into booking_payment
-- upon insert in booking_renting

DELIMITER $$

CREATE TRIGGER insert_payment_after_booking AFTER INSERT
ON booking_renting 
FOR EACH ROW BEGIN
INSERT INTO booking_payment VALUES 
(NEW.booking_id, NEW.hotel_id, NEW.chain, NULL, NULL, NULL);
END$$

DELIMITER ; 









